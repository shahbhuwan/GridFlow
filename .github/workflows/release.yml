# .github/workflows/build-on-push.yml
#
# This GitHub Actions workflow automates building the standalone GUI
# application for Windows, macOS, and Linux on every push to the main branch.
#
# How it works:
# 1. Trigger: The workflow runs automatically whenever you push a commit
#    to the 'main' branch.
# 2. Build Process: It builds the application for all three platforms.
# 3. Upload Artifacts: It uploads the final executables as "build artifacts".
#    These are temporary files attached to the workflow run, perfect for testing.
#
# NOTE: This workflow does NOT create a public GitHub Release.

name: Build on Push

on:
  push:
    branches:
      - main  # Triggers the workflow on push events to the main branch

jobs:
  build:
    # Use a build matrix to run the job on Windows, macOS, and Ubuntu
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: Check out the repository code
      - name: Check out repository
        uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Step 3: Install system dependencies (for Linux/Ubuntu only)
      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          # Use updated package names for modern Ubuntu runners
          sudo apt-get install -y libgl1 libglib2.0-0 libxkbcommon-x11-0 libxcb-xinerama0

      # Step 4: Install Python dependencies
      - name: Install Python packages
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install pyinstaller

      # Step 5: Build the executable using your script
      - name: Build Standalone Executable
        run: python build_executable.py

      # Step 6: Package the application for release
      - name: Package the application
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a "GridFlow-Windows.zip" "./dist/GridFlow.exe"
            echo "ASSET_PATH=GridFlow-Windows.zip" >> $GITHUB_ENV
          elif [ "${{ runner.os }}" == "macOS" ]; then
            mv dist/GridFlow dist/GridFlow.app
            zip -r "GridFlow-macOS.zip" "./dist/GridFlow.app"
            echo "ASSET_PATH=GridFlow-macOS.zip" >> $GITHUB_ENV
          else # Linux
            mv dist/GridFlow dist/GridFlow-Linux
            tar -czvf "GridFlow-Linux.tar.gz" "./dist/GridFlow-Linux"
            echo "ASSET_PATH=GridFlow-Linux.tar.gz" >> $GITHUB_ENV
          fi

      # Step 7: Upload Build Artifact
      # This makes the built files available for download from the Actions tab.
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: GridFlow-${{ matrix.os }}
          path: ${{ env.ASSET_PATH }}
